"use strict";(self.webpackChunkxdc_subnet_docs=self.webpackChunkxdc_subnet_docs||[]).push([[8508],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,c=u["".concat(s,".").concat(d)]||u[d]||k[d]||i;return n?a.createElement(c,o(o({ref:t},m),{},{components:n})):a.createElement(c,o({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2242:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_label:"Specs",sidebar_position:3},o=void 0,l={unversionedId:"components/subswap/spec",id:"components/subswap/spec",title:"spec",description:"Subswap API Documentation",source:"@site/docs/components/subswap/spec.md",sourceDirName:"components/subswap",slug:"/components/subswap/spec",permalink:"/xdc-subnet-docs/develop/components/subswap/spec",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Specs",sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Design",permalink:"/xdc-subnet-docs/develop/components/subswap/design"},next:{title:"Deployment Guide",permalink:"/xdc-subnet-docs/develop/category/deployment-guide"}},s={},p=[{value:"Subswap API Documentation",id:"subswap-api-documentation",level:3},{value:"<strong>Restricted Access Functions</strong>",id:"restricted-access-functions",level:2},{value:"<strong>ParentnetTreasury</strong>",id:"parentnettreasury",level:3},{value:"<strong>SubnetTreasury</strong>",id:"subnettreasury",level:3},{value:"<strong>Public Functions</strong>",id:"public-functions",level:2},{value:"<strong>ParentnetTreasury</strong>",id:"parentnettreasury-1",level:3},{value:"<strong>SubnetTreasury</strong>",id:"subnettreasury-1",level:3},{value:"<strong>Algorithms and Rules</strong>",id:"algorithms-and-rules",level:2},{value:"<strong>Minting and Burning</strong>",id:"minting-and-burning",level:3},{value:"<strong>Locking and Unlocking</strong>",id:"locking-and-unlocking",level:3},{value:"<strong>Endpoint and Cross-Chain Communication</strong>",id:"endpoint-and-cross-chain-communication",level:3}],m={toc:p},u="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"subswap-api-documentation"},"Subswap API Documentation"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"This document provides an API reference for the Subswap contracts, specifically for the ",(0,r.kt)("inlineCode",{parentName:"p"},"ParentnetTreasury")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"SubnetTreasury")," contracts. These contracts facilitate cross-chain asset transfers by minting, burning, locking, and unlocking tokens between chains."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"restricted-access-functions"},(0,r.kt)("strong",{parentName:"h2"},"Restricted Access Functions")),(0,r.kt)("h3",{id:"parentnettreasury"},(0,r.kt)("strong",{parentName:"h3"},"ParentnetTreasury")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"changeEndpoint(address endpoint) -> void"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Allows the contract owner to set a new endpoint address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"endpoint"),": The address of the new endpoint."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Access"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"onlyOwner")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"setEndpoint(address endpoint) -> void"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Sets a new endpoint address, restricted to calls from the current endpoint."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"endpoint"),": The address of the new endpoint."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Access"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"onlyEndpoint")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"mint(...) -> void"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Mints tokens on the ",(0,r.kt)("inlineCode",{parentName:"li"},"SubnetTreasury")," chain in response to a cross-chain transfer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"originalToken"),": Address of the original token."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name"),": Name of the token."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"symbol"),": Symbol of the token."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"account"),": Address of the account receiving the minted tokens."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": Number of tokens to mint."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sid"),": Source chain ID."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Access"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"onlyEndpoint"))))),(0,r.kt)("h3",{id:"subnettreasury"},(0,r.kt)("strong",{parentName:"h3"},"SubnetTreasury")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"changeEndpoint(address endpoint) -> void"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Allows the contract owner to set a new endpoint address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"endpoint"),": The address of the new endpoint."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Access"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"onlyOwner")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"setEndpoint(address endpoint) -> void"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Sets a new endpoint address, restricted to calls from the current endpoint."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"endpoint"),": The address of the new endpoint."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Access"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"onlyEndpoint")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"unlock(address token, uint256 amount, address recv) -> void"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Unlocks tokens on the current chain, sending them to the specified address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"token"),": Address of the token to unlock."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": Amount of tokens to unlock."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"recv"),": Address of the recipient."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Access"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"onlyEndpoint"))))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"public-functions"},(0,r.kt)("strong",{parentName:"h2"},"Public Functions")),(0,r.kt)("h3",{id:"parentnettreasury-1"},(0,r.kt)("strong",{parentName:"h3"},"ParentnetTreasury")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"burn(...) -> void"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Burns tokens on the ",(0,r.kt)("inlineCode",{parentName:"li"},"ParentnetTreasury")," side to initiate a cross-chain transfer, sending a message to ",(0,r.kt)("inlineCode",{parentName:"li"},"SubnetTreasury")," to mint tokens."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rid"),": Destination chain ID."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rua"),": Receiver\u2019s address on the destination chain."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"originalToken"),": Address of the original token on the source chain."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"token"),": Address of the Treasury token to burn."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": Number of tokens to burn."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"recv"),": Address to receive tokens on the destination chain."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Events"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Emits a ",(0,r.kt)("inlineCode",{parentName:"li"},"Burn")," event with details of the burned amount and target chain."))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"test(uint256 rid, address rua, bytes memory data) -> void"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Sends arbitrary data to the specified chain via the endpoint, for testing purposes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rid"),": Destination chain ID."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rua"),": Receiver\u2019s address on the destination chain."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data"),": Encoded data to send."))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"getEndpoint() -> address"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Returns the current endpoint address.")))),(0,r.kt)("h3",{id:"subnettreasury-1"},(0,r.kt)("strong",{parentName:"h3"},"SubnetTreasury")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"lock(...) -> void"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Locks tokens on the ",(0,r.kt)("inlineCode",{parentName:"li"},"SubnetTreasury")," side to initiate a cross-chain transfer, sending a message to ",(0,r.kt)("inlineCode",{parentName:"li"},"ParentnetTreasury")," to mint tokens."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rid"),": Destination chain ID."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rua"),": Receiver\u2019s address on the destination chain."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"token"),": Address of the token to lock."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": Amount of tokens to lock."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"recv"),": Address to receive tokens on the destination chain."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Events"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Emits a ",(0,r.kt)("inlineCode",{parentName:"li"},"Lock")," event with details of the locked amount and target chain."))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"getChainId() -> uint256"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Returns the chain ID of the current chain."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"getEndpoint() -> address"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description"),": Returns the current endpoint address.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"algorithms-and-rules"},(0,r.kt)("strong",{parentName:"h2"},"Algorithms and Rules")),(0,r.kt)("h3",{id:"minting-and-burning"},(0,r.kt)("strong",{parentName:"h3"},"Minting and Burning")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Minting (ParentnetTreasury)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When ",(0,r.kt)("inlineCode",{parentName:"li"},"SubnetTreasury")," locks tokens on its chain, it sends a message to ",(0,r.kt)("inlineCode",{parentName:"li"},"ParentnetTreasury")," to mint an equivalent amount on the destination chain."),(0,r.kt)("li",{parentName:"ul"},"If a Treasury token contract does not exist for the original token, a new one is created and mapped to the original token in ",(0,r.kt)("inlineCode",{parentName:"li"},"treasuryMapping"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Burning (ParentnetTreasury)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"To initiate a cross-chain transfer back to the original chain, the ",(0,r.kt)("inlineCode",{parentName:"li"},"burn")," function is called to destroy tokens on ",(0,r.kt)("inlineCode",{parentName:"li"},"ParentnetTreasury"),". "),(0,r.kt)("li",{parentName:"ul"},"After burning, a message is sent to ",(0,r.kt)("inlineCode",{parentName:"li"},"SubnetTreasury")," to unlock an equivalent amount on the destination chain.")))),(0,r.kt)("h3",{id:"locking-and-unlocking"},(0,r.kt)("strong",{parentName:"h3"},"Locking and Unlocking")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Locking (SubnetTreasury)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Tokens are locked on ",(0,r.kt)("inlineCode",{parentName:"li"},"SubnetTreasury")," by transferring them from the caller\u2019s address to the contract. "),(0,r.kt)("li",{parentName:"ul"},"The contract then sends a cross-chain message to ",(0,r.kt)("inlineCode",{parentName:"li"},"ParentnetTreasury")," to mint equivalent tokens on the destination chain."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Unlocking (SubnetTreasury)")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In response to a burn action on ",(0,r.kt)("inlineCode",{parentName:"li"},"ParentnetTreasury"),", the ",(0,r.kt)("inlineCode",{parentName:"li"},"SubnetTreasury")," unlocks tokens on its chain and sends them to the specified recipient.")))),(0,r.kt)("h3",{id:"endpoint-and-cross-chain-communication"},(0,r.kt)("strong",{parentName:"h3"},"Endpoint and Cross-Chain Communication")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All cross-chain messages are handled through the ",(0,r.kt)("inlineCode",{parentName:"li"},"IEndpoint")," interface, which abstracts the low-level cross-chain communication."),(0,r.kt)("li",{parentName:"ul"},"Each function that initiates cross-chain actions (mint, burn, lock, unlock) encodes data using ",(0,r.kt)("inlineCode",{parentName:"li"},"abi.encodeWithSelector")," to create a message payload, ensuring proper handling of contract-specific calls on the destination chain.")))}k.isMDXComponent=!0}}]);